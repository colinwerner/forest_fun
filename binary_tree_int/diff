diff --git a/binary_tree_int/src/binary_tree_int.c b/binary_tree_int/src/binary_tree_int.c
index 3731458..b143362 100644
--- a/binary_tree_int/src/binary_tree_int.c
+++ b/binary_tree_int/src/binary_tree_int.c
@@ -92,18 +92,18 @@ bt_int_insert(bt_node_int_t *root, int value)
 }
 
 static bt_node_int_err_t
-print_preorder(bt_node_int_t *root, char *buf, size_t buf_size,
-               size_t printed)
+__print_preorder(bt_node_int_t *root, char *buf, size_t buf_size,
+                 size_t *printed)
 {
     bt_node_int_err_t ret;
     ret = BT_INT_ERROR;
     if (NULL != root) {
-        printed += snprintf(buf + printed, buf_size - printed, "%d ",
+        *printed = *printed + snprintf(buf + *printed, buf_size - *printed, "%d ",
             root->value
         );
-        print_preorder(root->left, buf, buf_size, printed);
-        print_preorder(root->right, buf, buf_size, printed);
-        if (printed < buf_size) {
+        __print_preorder(root->left, buf, buf_size, printed);
+        __print_preorder(root->right, buf, buf_size, printed);
+        if ((*printed) < buf_size) {
             ret = BT_INT_SUCCESS;
         }
     }
@@ -112,16 +112,23 @@ print_preorder(bt_node_int_t *root, char *buf, size_t buf_size,
 }
 
 static bt_node_int_err_t
+print_preorder(bt_node_int_t *root, char *buf, size_t buf_size)
+{
+    size_t printed = 0;
+    return __print_preorder(root, buf, buf_size, &printed);
+}
+
+static bt_node_int_err_t
 print_inorder(bt_node_int_t *root, char *buf, size_t buf_size, size_t printed)
 {
     bt_node_int_err_t ret;
     ret = BT_INT_ERROR;
     if (NULL != root) {
-        print_preorder(root->left, buf, buf_size, printed);
+        print_inorder(root->left, buf, buf_size, printed);
         printed += snprintf(buf + printed, buf_size - printed, "%d ",
             root->value
         );
-        print_preorder(root->right, buf, buf_size, printed);
+        print_inorder(root->right, buf, buf_size, printed);
         if (printed < buf_size) {
             ret = BT_INT_SUCCESS;
         }
@@ -137,8 +144,8 @@ print_postorder(bt_node_int_t *root, char *buf, size_t buf_size,
     bt_node_int_err_t ret;
     ret = BT_INT_ERROR;
     if (NULL != root) {
-        print_preorder(root->left, buf, buf_size, printed);
-        print_preorder(root->right, buf, buf_size, printed);
+        print_postorder(root->left, buf, buf_size, printed);
+        print_postorder(root->right, buf, buf_size, printed);
         printed += snprintf(buf + printed, buf_size - printed, "%d ",
             root->value
         );
@@ -151,12 +158,12 @@ print_postorder(bt_node_int_t *root, char *buf, size_t buf_size,
 }
 
 bt_node_int_err_t
-bt_int_sprintf(bt_node_int_t *root, bt_int_order_type_t type, char *buf, size_t buf_size) {
+bt_int_snprintf(bt_node_int_t *root, bt_int_order_type_t type, char *buf, size_t buf_size) {
     bt_node_int_err_t ret;
     ret = BT_INT_ERROR;
     switch (type) {
         case BT_INT_PREORDER:
-            ret = print_preorder(root, buf, buf_size, 0);
+            ret = print_preorder(root, buf, buf_size);
         break;
 
 	    case BT_INT_INORDER:
diff --git a/binary_tree_int/src/binary_tree_int.h b/binary_tree_int/src/binary_tree_int.h
index 0eb2995..db3a4be 100644
--- a/binary_tree_int/src/binary_tree_int.h
+++ b/binary_tree_int/src/binary_tree_int.h
@@ -30,7 +30,7 @@ bt_node_int_err_t
 bt_int_insert(bt_node_int_t *root, int value);
 
 bt_node_int_err_t
-bt_int_sprintf(bt_node_int_t *root, bt_int_order_type_t type, char *buf, size_t buf_size);
+bt_int_snprintf(bt_node_int_t *root, bt_int_order_type_t type, char *buf, size_t buf_size);
 
 int
 bt_int_get_value(bt_node_int_t *root);
diff --git a/binary_tree_int/tests/check_main.c b/binary_tree_int/tests/check_main.c
index 87f97b5..0d840a6 100644
--- a/binary_tree_int/tests/check_main.c
+++ b/binary_tree_int/tests/check_main.c
@@ -13,6 +13,9 @@ struct suite {
 static struct suite suites[] =
 {
     {"creation", creation_suite},
+    {"height", height_suite},
+    {"insertion", insertion_suite},
+    {"sprintf", sprintf_suite},
 };
 
 const int SUITE_COUNT = (sizeof(suites)/(sizeof(suites[0])));
diff --git a/binary_tree_int/tests/check_sprintf_suite.c b/binary_tree_int/tests/check_sprintf_suite.c
index 09477b0..b3798d8 100644
--- a/binary_tree_int/tests/check_sprintf_suite.c
+++ b/binary_tree_int/tests/check_sprintf_suite.c
@@ -19,16 +19,43 @@ START_TEST(sprintf_test)
     char buf[BUFFER_SIZE];
 
     tree = bt_int_create(ROOT_ELEMENT);
-    fail_if(NULL == tree);
+    ck_assert_ptr_ne(NULL, tree);
 
-    ret = bt_int_sprintf(tree, BT_INT_PREORDER, buf, sizeof(buf));
-    fail_if(0 != strncmp("11", buf, sizeof(buf)));
+    ret = bt_int_snprintf(tree, BT_INT_PREORDER, buf, sizeof(buf));
+    ck_assert_int_eq(BT_INT_SUCCESS, ret);
+    ck_assert_str_eq("11 ", buf);
+
+    ret = bt_int_insert(tree, 5);
+    ck_assert_int_eq(BT_INT_SUCCESS, ret);
+    ret = bt_int_snprintf(tree, BT_INT_PREORDER, buf, sizeof(buf));
+    ck_assert_int_eq(BT_INT_SUCCESS, ret);
+    ck_assert_str_eq("11 5 ", buf);
+
+    ret = bt_int_insert(tree, 16);
+    ck_assert_int_eq(BT_INT_SUCCESS, ret);
+    ret = bt_int_snprintf(tree, BT_INT_PREORDER, buf, sizeof(buf));
+    ck_assert_int_eq(BT_INT_SUCCESS, ret);
+    ck_assert_str_eq("11 5 16 ", buf);
+
+    ret = bt_int_insert(tree, 19);
+    ck_assert_int_eq(BT_INT_SUCCESS, ret);
+    ret = bt_int_insert(tree, 3);
+    ck_assert_int_eq(BT_INT_SUCCESS, ret);
+    ret = bt_int_insert(tree, 8);
+    ck_assert_int_eq(BT_INT_SUCCESS, ret);
+    ret = bt_int_insert(tree, 7);
+    ck_assert_int_eq(BT_INT_SUCCESS, ret);
+    ret = bt_int_insert(tree, 10);
+    ck_assert_int_eq(BT_INT_SUCCESS, ret);
+    ret = bt_int_snprintf(tree, BT_INT_PREORDER, buf, sizeof(buf));
+    ck_assert_int_eq(BT_INT_SUCCESS, ret);
+    ck_assert_str_eq("11 5 3 8 7 10 16 19 ", buf);
 
     ret = bt_int_destroy(tree);
-    fail_if(BT_INT_SUCCESS != ret);
+    ck_assert_int_eq(BT_INT_SUCCESS, ret);
 
     tree = NULL;
-    fail_if(NULL != tree);
+    ck_assert_ptr_eq(NULL, tree);
 }
 END_TEST
 
diff --git a/binary_tree_int/tests/check_suites.h b/binary_tree_int/tests/check_suites.h
index b925b44..238d8da 100644
--- a/binary_tree_int/tests/check_suites.h
+++ b/binary_tree_int/tests/check_suites.h
@@ -1,3 +1,6 @@
 #include <check.h>
 
-Suite *creation_suite(void);
\ No newline at end of file
+Suite *creation_suite(void);
+Suite *height_suite(void);
+Suite *insertion_suite(void);
+Suite *sprintf_suite(void);
\ No newline at end of file
